{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pdb81\\\\OneDrive\\\\Desktop\\\\Automated-Canteen-System\\\\frontend\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(null);\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      // You should also verify the token with the backend here\n      const storedUser = JSON.parse(localStorage.getItem('user'));\n      setUser(storedUser);\n      axios.defaults.headers.common['x-auth-token'] = token;\n    }\n    setLoading(false);\n  }, []);\n  const login = async (username, password) => {\n    const res = await axios.post('http://localhost:5001/api/auth/login', {\n      username,\n      password\n    });\n    localStorage.setItem('token', res.data.token);\n    localStorage.setItem('user', JSON.stringify(res.data.user));\n    setUser(res.data.user);\n    axios.defaults.headers.common['x-auth-token'] = res.data.token;\n  };\n  const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    setUser(null);\n    delete axios.defaults.headers.common['x-auth-token'];\n  };\n  const value = {\n    user,\n    login,\n    logout,\n    loading\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: !loading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n};\n_s2(AuthProvider, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","axios","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","user","setUser","loading","setLoading","token","localStorage","getItem","storedUser","JSON","parse","defaults","headers","common","login","username","password","res","post","setItem","data","stringify","logout","removeItem","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/pdb81/OneDrive/Desktop/Automated-Canteen-System/frontend/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst AuthContext = createContext(null);\r\n\r\nexport const useAuth = () => useContext(AuthContext);\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n    const [user, setUser] = useState(null);\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        const token = localStorage.getItem('token');\r\n        if (token) {\r\n            // You should also verify the token with the backend here\r\n            const storedUser = JSON.parse(localStorage.getItem('user'));\r\n            setUser(storedUser);\r\n            axios.defaults.headers.common['x-auth-token'] = token;\r\n        }\r\n        setLoading(false);\r\n    }, []);\r\n\r\n    const login = async (username, password) => {\r\n        const res = await axios.post('http://localhost:5001/api/auth/login', { username, password });\r\n        localStorage.setItem('token', res.data.token);\r\n        localStorage.setItem('user', JSON.stringify(res.data.user));\r\n        setUser(res.data.user);\r\n        axios.defaults.headers.common['x-auth-token'] = res.data.token;\r\n    };\r\n\r\n    const logout = () => {\r\n        localStorage.removeItem('token');\r\n        localStorage.removeItem('user');\r\n        setUser(null);\r\n        delete axios.defaults.headers.common['x-auth-token'];\r\n    };\r\n\r\n    const value = { user, login, logout, loading };\r\n\r\n    return (\r\n        <AuthContext.Provider value={value}>\r\n            {!loading && children}\r\n        </AuthContext.Provider>\r\n    );\r\n};"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,SAAS,QAAQ,OAAO;AAC7E,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,WAAW,gBAAGP,aAAa,CAAC,IAAI,CAAC;AAEvC,OAAO,MAAMQ,OAAO,GAAGA,CAAA;EAAAC,EAAA;EAAA,OAAMP,UAAU,CAACK,WAAW,CAAC;AAAA;AAACE,EAAA,CAAxCD,OAAO;AAEpB,OAAO,MAAME,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC1C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACc,OAAO,EAAEC,UAAU,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EAE5CE,SAAS,CAAC,MAAM;IACZ,MAAMc,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,IAAIF,KAAK,EAAE;MACP;MACA,MAAMG,UAAU,GAAGC,IAAI,CAACC,KAAK,CAACJ,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC;MAC3DL,OAAO,CAACM,UAAU,CAAC;MACnBhB,KAAK,CAACmB,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,cAAc,CAAC,GAAGR,KAAK;IACzD;IACAD,UAAU,CAAC,KAAK,CAAC;EACrB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMU,KAAK,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,QAAQ,KAAK;IACxC,MAAMC,GAAG,GAAG,MAAMzB,KAAK,CAAC0B,IAAI,CAAC,sCAAsC,EAAE;MAAEH,QAAQ;MAAEC;IAAS,CAAC,CAAC;IAC5FV,YAAY,CAACa,OAAO,CAAC,OAAO,EAAEF,GAAG,CAACG,IAAI,CAACf,KAAK,CAAC;IAC7CC,YAAY,CAACa,OAAO,CAAC,MAAM,EAAEV,IAAI,CAACY,SAAS,CAACJ,GAAG,CAACG,IAAI,CAACnB,IAAI,CAAC,CAAC;IAC3DC,OAAO,CAACe,GAAG,CAACG,IAAI,CAACnB,IAAI,CAAC;IACtBT,KAAK,CAACmB,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,cAAc,CAAC,GAAGI,GAAG,CAACG,IAAI,CAACf,KAAK;EAClE,CAAC;EAED,MAAMiB,MAAM,GAAGA,CAAA,KAAM;IACjBhB,YAAY,CAACiB,UAAU,CAAC,OAAO,CAAC;IAChCjB,YAAY,CAACiB,UAAU,CAAC,MAAM,CAAC;IAC/BrB,OAAO,CAAC,IAAI,CAAC;IACb,OAAOV,KAAK,CAACmB,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,cAAc,CAAC;EACxD,CAAC;EAED,MAAMW,KAAK,GAAG;IAAEvB,IAAI;IAAEa,KAAK;IAAEQ,MAAM;IAAEnB;EAAQ,CAAC;EAE9C,oBACIT,OAAA,CAACC,WAAW,CAAC8B,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAAzB,QAAA,EAC9B,CAACI,OAAO,IAAIJ;EAAQ;IAAA2B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAE/B,CAAC;AAAC7B,GAAA,CArCWF,YAAY;AAAAgC,EAAA,GAAZhC,YAAY;AAAA,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}